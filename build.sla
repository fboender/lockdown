#
# This is a script containing functions that are used as build rules. You can
# use the Simple Little Automator (https://github.com/fboender/sla.git) to run
# these rules, or you can run them directly in your shell:
#
#   $ bash -c ". build.sla && test"
#

clean () {
    # Remove build artifacts and other junk
    rm -rf __pycache__
    rm -rf build/ dist/
    rm -f lockdown*.spec
    rm -f lockdown-*.tar.gz
    rm -f README.html
}

readme2html () {
    # Convert README.md to README.html
    pandoc README.md --metadata title="README" -s -c contrib/pandoc-github.css -o README.html
}

build_bin () {
    # Build standalone executable

    # Check glib version
    GLIBC_VERSION="$(ldd --version | head -n1 | awk '{print $NF}')"
    if [ "$GLIBC_VERSION" != "2.31" ]; then
        echo "Building against too recent glibc version (v$GLIBC_VERSION). Expecting v2.31." >&2
        exit 1
    fi
    VERSION="$(grep "^__VERSION__" lockdown.py | cut -d "\"" -f2)"
    pyinstaller --log-level WARN --strip --onefile --clean ./lockdown.py
}

build_release () {
    # Build release file
    build_bin

    VERSION="$(grep "^__VERSION__" lockdown.py | cut -d "\"" -f2)"
    mkdir -p "lockdown-$VERSION/contrib/"
    cp README.md "lockdown-$VERSION"
    cp dist/lockdown "lockdown-$VERSION"
    cp contrib/lockdown-daemon.conf "lockdown-$VERSION/contrib/"
    cp contrib/lockdown.service "lockdown-$VERSION/contrib/"
    cp contrib/install.sh "lockdown-$VERSION/"
    cp contrib/uninstall.sh "lockdown-$VERSION/"
    tar -czf "lockdown-$VERSION.tar.gz" "lockdown-$VERSION/"
    rm -rf "lockdown-$VERSION"
}

build () {
    # Build everything
    build_release
}
